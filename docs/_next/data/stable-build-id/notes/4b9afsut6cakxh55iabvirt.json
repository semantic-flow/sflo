{"pageProps":{"note":{"id":"4b9afsut6cakxh55iabvirt","title":"Composability","desc":"","updated":1751237165789,"created":1751233874377,"custom":{},"fname":"concept.composability","type":"note","vault":{"fsPath":"documentation","selfContained":false,"name":"sflo"},"contentHash":"68dd1d5ca5c679aaaee085504ad899f7","links":[{"from":{"fname":"concept.url.reference-path-choices","id":"s1yduc399adt3ihvnwievrd","vaultName":"sflo"},"type":"backlink","position":{"start":{"line":30,"column":55,"offset":725},"end":{"line":30,"column":80,"offset":750},"indent":[]},"value":"concept.composability"},{"from":{"fname":"dev.contributor.djradon.dev-log","id":"fd1whkyvoagggk6ubysjl50","vaultName":"sflo"},"type":"backlink","position":{"start":{"line":14,"column":88,"offset":306},"end":{"line":14,"column":113,"offset":331},"indent":[]},"value":"concept.composability"}],"anchors":{"overview":{"type":"header","text":"Overview","value":"overview","line":10,"column":0,"depth":2},"key-concepts":{"type":"header","text":"Key Concepts","value":"key-concepts","line":14,"column":0,"depth":2},"mesh-boundaries":{"type":"header","text":"Mesh Boundaries","value":"mesh-boundaries","line":16,"column":0,"depth":3},"upward-reference-problem":{"type":"header","text":"Upward Reference Problem","value":"upward-reference-problem","line":20,"column":0,"depth":3},"weaving-process-solution":{"type":"header","text":"Weaving Process Solution","value":"weaving-process-solution","line":24,"column":0,"depth":3},"incorporating-external-meshes":{"type":"header","text":"Incorporating External Meshes","value":"incorporating-external-meshes","line":33,"column":0,"depth":2},"importing-no-external-connection":{"type":"header","text":"Importing (No External Connection)","value":"importing-no-external-connection","line":35,"column":0,"depth":3},"embedding-maintains-external-connection":{"type":"header","text":"Embedding (Maintains External Connection)","value":"embedding-maintains-external-connection","line":55,"column":0,"depth":3},"directory-structure-after-incorporation":{"type":"header","text":"Directory Structure After Incorporation","value":"directory-structure-after-incorporation","line":69,"column":0,"depth":3},"extracting-submeshes":{"type":"header","text":"Extracting Submeshes","value":"extracting-submeshes","line":87,"column":0,"depth":2},"post-weave-extraction":{"type":"header","text":"Post-Weave Extraction","value":"post-weave-extraction","line":89,"column":0,"depth":3},"pre-weave-considerations":{"type":"header","text":"Pre-Weave Considerations","value":"pre-weave-considerations","line":101,"column":0,"depth":3},"cross-mesh-references":{"type":"header","text":"Cross-Mesh References","value":"cross-mesh-references","line":108,"column":0,"depth":2},"between-independent-meshes":{"type":"header","text":"Between Independent Meshes","value":"between-independent-meshes","line":110,"column":0,"depth":3},"discovery-patterns":{"type":"header","text":"Discovery Patterns","value":"discovery-patterns","line":119,"column":0,"depth":3},"composition-patterns":{"type":"header","text":"Composition Patterns","value":"composition-patterns","line":126,"column":0,"depth":2},"collaborative-collection":{"type":"header","text":"Collaborative Collection","value":"collaborative-collection","line":128,"column":0,"depth":3},"organizational-hierarchy":{"type":"header","text":"Organizational Hierarchy","value":"organizational-hierarchy","line":138,"column":0,"depth":3},"temporal-snapshots":{"type":"header","text":"Temporal Snapshots","value":"temporal-snapshots","line":148,"column":0,"depth":3},"best-practices":{"type":"header","text":"Best Practices","value":"best-practices","line":157,"column":0,"depth":2},"for-mesh-designers":{"type":"header","text":"For Mesh Designers","value":"for-mesh-designers","line":159,"column":0,"depth":3},"for-mesh-composers":{"type":"header","text":"For Mesh Composers","value":"for-mesh-composers","line":166,"column":0,"depth":3},"for-cross-mesh-references":{"type":"header","text":"For Cross-Mesh References","value":"for-cross-mesh-references","line":174,"column":0,"depth":3},"workflow-integration":{"type":"header","text":"Workflow Integration","value":"workflow-integration","line":181,"column":0,"depth":2},"development-workflow":{"type":"header","text":"Development Workflow","value":"development-workflow","line":183,"column":0,"depth":3},"maintenance-workflow":{"type":"header","text":"Maintenance Workflow","value":"maintenance-workflow","line":189,"column":0,"depth":3},"tbd-items":{"type":"header","text":"TBD Items","value":"tbd-items","line":196,"column":0,"depth":2}},"children":[],"parent":"p0vd6xnshcxw14ztkglxyxn","data":{}},"body":"<h1 id=\"composability\">Composability<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#composability\"></a></h1>\n<p>//TODO: re-verify this ai-generated content</p>\n<h2 id=\"overview\">Overview<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#overview\"></a></h2>\n<p>Composability is the ability to combine multiple meshes or extract submeshes to create new, functional semantic structures. Semantic Flow enables flexible mesh composition through git-native operations and intelligent reference resolution.</p>\n<h2 id=\"key-concepts\">Key Concepts<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-concepts\"></a></h2>\n<h3 id=\"mesh-boundaries\">Mesh Boundaries<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mesh-boundaries\"></a></h3>\n<p>Each git repository represents a complete mesh with its own root namespace. Cross-mesh references use absolute URIs, while intra-mesh references use relative URIs.</p>\n<h3 id=\"upward-reference-problem\">Upward Reference Problem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#upward-reference-problem\"></a></h3>\n<p>When extracting submeshes, upward references can break. For example, if something within <code>ns/djradon/bio/</code> references <code>../../</code> (pointing to <code>ns/djradon/</code>), that reference will break if only the <code>bio/</code> subtree is copied elsewhere.</p>\n<h3 id=\"weaving-process-solution\">Weaving Process Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#weaving-process-solution\"></a></h3>\n<p>During weaving, tools:</p>\n<ol>\n<li><strong>Scan for broken relatives</strong>: Check all relative URLs in the mesh</li>\n<li><strong>Convert broken ones</strong>: Replace with absolute URLs using canonical publication data</li>\n<li><strong>Leave working relatives alone</strong>: Preserve transposability where possible</li>\n</ol>\n<p>After weaving, submeshes are semantically complete and can be composed using standard file operations.</p>\n<h2 id=\"incorporating-external-meshes\">Incorporating External Meshes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#incorporating-external-meshes\"></a></h2>\n<h3 id=\"importing-no-external-connection\">Importing (No External Connection)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#importing-no-external-connection\"></a></h3>\n<p>Import meshes or submeshes as permanent copies with no ongoing connection to the source:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Method 1: Git archive (clean, can target specific paths)</span>\n<span class=\"token function\">git</span> archive --remote<span class=\"token operator\">=</span>https://github.com/djradon/mesh.git main ns/djradon/ <span class=\"token operator\">|</span> <span class=\"token function\">tar</span> -x -C collaborators/\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> collaborators/djradon/\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Import djradon's mesh\"</span>\n\n<span class=\"token comment\"># Method 2: Download and copy</span>\n<span class=\"token function\">curl</span> -L https://github.com/djradon/mesh/archive/main.zip -o mesh.zip\n<span class=\"token function\">unzip</span> mesh.zip\n<span class=\"token function\">cp</span> -r mesh-main/ns/djradon/ collaborators/djradon/\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> collaborators/djradon/\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Import djradon's mesh\"</span>\n</code></pre>\n<p>The imported content becomes permanently part of your repository with no external dependencies.</p>\n<h3 id=\"embedding-maintains-external-connection\">Embedding (Maintains External Connection)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#embedding-maintains-external-connection\"></a></h3>\n<p>Embed external meshes while maintaining a connection for updates:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Import with ongoing connection to source repo</span>\n<span class=\"token function\">git</span> subtree <span class=\"token function\">add</span> --prefix<span class=\"token operator\">=</span>collaborators/djradon/ https://github.com/djradon/mesh.git main --squash\n\n<span class=\"token comment\"># Update embedded mesh later</span>\n<span class=\"token function\">git</span> subtree pull --prefix<span class=\"token operator\">=</span>collaborators/djradon/ https://github.com/djradon/mesh.git main --squash\n</code></pre>\n<p>The embedded content becomes part of your repository and site, but you can pull updates from the source repository.</p>\n<h3 id=\"directory-structure-after-incorporation\">Directory Structure After Incorporation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#directory-structure-after-incorporation\"></a></h3>\n<pre><code>your-mesh/\n├── _flow/                           # Your mesh metadata\n├── _handle/\n├── ns/\n│   └── yourdata/\n└── collaborators/\n    └── djradon/                     # Imported/embedded mesh - served as static files\n        ├── _flow/                   # Their mesh metadata\n        ├── _handle/\n        └── ns/\n            └── djradon/\n</code></pre>\n<p>All files are served directly as static content when the repository is published (e.g., via GitHub Pages).</p>\n<h2 id=\"extracting-submeshes\">Extracting Submeshes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#extracting-submeshes\"></a></h2>\n<h3 id=\"post-weave-extraction\">Post-Weave Extraction<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#post-weave-extraction\"></a></h3>\n<p>After weaving resolves broken references, any subtree becomes a semantically complete mesh that can be copied using standard file operations:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Copy submesh to create standalone mesh</span>\n<span class=\"token function\">cp</span> -r ns/djradon/ <span class=\"token punctuation\">..</span>/standalone-mesh/\n\n<span class=\"token comment\"># Copy submesh to another location (e.g., for backup)</span>\n<span class=\"token function\">rsync</span> -av collaborators/alice/ backup/alice/\n</code></pre>\n<h3 id=\"pre-weave-considerations\">Pre-Weave Considerations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pre-weave-considerations\"></a></h3>\n<p>Before weaving, analyze upward dependencies:</p>\n<ul>\n<li>Identify references that point outside the intended extraction boundary</li>\n<li>Determine if the extracted submesh will be semantically complete</li>\n<li>Consider whether broken references should become absolute URLs</li>\n</ul>\n<h2 id=\"cross-mesh-references\">Cross-Mesh References<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cross-mesh-references\"></a></h2>\n<h3 id=\"between-independent-meshes\">Between Independent Meshes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#between-independent-meshes\"></a></h3>\n<p>References between separate mesh repositories use absolute URIs:</p>\n<pre class=\"language-turtle\"><code class=\"language-turtle\"><span class=\"token comment\"># Reference to external mesh</span>\n<span class=\"token url\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span> <span class=\"token function\"><span class=\"token prefix\">foaf<span class=\"token punctuation\">:</span></span><span class=\"token local-name\">knows</span></span> <span class=\"token url\"><span class=\"token punctuation\">&#x3C;</span>https://alice.github.io/mesh/ns/alice/<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">.</span>\n</code></pre>\n<h3 id=\"discovery-patterns\">Discovery Patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#discovery-patterns\"></a></h3>\n<p><strong>TBD</strong>: Standardized mechanisms for:</p>\n<ul>\n<li>Mesh discovery and registration</li>\n<li>Stable cross-mesh URI patterns</li>\n<li>Handling moved or unavailable external meshes</li>\n</ul>\n<h2 id=\"composition-patterns\">Composition Patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#composition-patterns\"></a></h2>\n<h3 id=\"collaborative-collection\">Collaborative Collection<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#collaborative-collection\"></a></h3>\n<p>Multiple researchers contributing to a shared mesh:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Add each contributor's mesh</span>\n<span class=\"token function\">git</span> subtree <span class=\"token function\">add</span> --prefix<span class=\"token operator\">=</span>contributors/alice/ https://alice.example/mesh.git main\n<span class=\"token function\">git</span> subtree <span class=\"token function\">add</span> --prefix<span class=\"token operator\">=</span>contributors/bob/ https://bob.example/mesh.git main\n</code></pre>\n<h3 id=\"organizational-hierarchy\">Organizational Hierarchy<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#organizational-hierarchy\"></a></h3>\n<p>Department-level meshes within institutional mesh:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Add department submeshes</span>\n<span class=\"token function\">git</span> subtree <span class=\"token function\">add</span> --prefix<span class=\"token operator\">=</span>departments/cs/ https://github.com/cs-dept/mesh.git main\n<span class=\"token function\">git</span> subtree <span class=\"token function\">add</span> --prefix<span class=\"token operator\">=</span>departments/bio/ https://github.com/bio-dept/mesh.git main\n</code></pre>\n<h3 id=\"temporal-snapshots\">Temporal Snapshots<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#temporal-snapshots\"></a></h3>\n<p>Preserving historical versions of external meshes:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Import specific version</span>\n<span class=\"token function\">git</span> subtree <span class=\"token function\">add</span> --prefix<span class=\"token operator\">=</span>snapshots/2024/djradon/ https://github.com/djradon/mesh.git v2024.1\n</code></pre>\n<h2 id=\"best-practices\">Best Practices<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#best-practices\"></a></h2>\n<h3 id=\"for-mesh-designers\">For Mesh Designers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#for-mesh-designers\"></a></h3>\n<ol>\n<li><strong>Minimize upward references</strong> in submesh boundaries to reduce weaving complexity</li>\n<li><strong>Design clear extraction points</strong> - consider which subtrees should be independently viable</li>\n<li><strong>Document dependencies</strong> - note which parts of the mesh reference external components</li>\n<li><strong>Use semantic boundaries</strong> - align mesh structure with logical domain boundaries</li>\n</ol>\n<h3 id=\"for-mesh-composers\">For Mesh Composers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#for-mesh-composers\"></a></h3>\n<ol>\n<li><strong>Choose import vs embed</strong> based on maintenance needs - import for permanent copies, embed for ongoing updates</li>\n<li><strong>Import entire meshes</strong> rather than attempting partial extraction from external repos</li>\n<li><strong>Weave before extraction</strong> to ensure semantic completeness</li>\n<li><strong>Maintain incorporation metadata</strong> - track source repositories and versions</li>\n<li><strong>Test extracted submeshes</strong> independently before distribution</li>\n</ol>\n<h3 id=\"for-cross-mesh-references\">For Cross-Mesh References<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#for-cross-mesh-references\"></a></h3>\n<ol>\n<li><strong>Use absolute URIs</strong> for references to external meshes</li>\n<li><strong>Prefer stable, canonical URIs</strong> over temporary or redirect-based URLs</li>\n<li><strong>Document external dependencies</strong> for mesh consumers</li>\n<li><strong>Consider fallback strategies</strong> for unavailable external resources</li>\n</ol>\n<h2 id=\"workflow-integration\">Workflow Integration<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#workflow-integration\"></a></h2>\n<h3 id=\"development-workflow\">Development Workflow<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#development-workflow\"></a></h3>\n<ol>\n<li>Incorporate external meshes using import (permanent) or embed (updateable) as needed</li>\n<li>Work with relative references for local development</li>\n<li>Weave before sharing to resolve broken dependencies</li>\n<li>Test extracted submeshes independently</li>\n</ol>\n<h3 id=\"maintenance-workflow\">Maintenance Workflow<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#maintenance-workflow\"></a></h3>\n<ol>\n<li>For embedded meshes: periodically update with <code>git subtree pull</code></li>\n<li>For imported meshes: manually re-import if updates are needed</li>\n<li>Re-weave after updates to handle any new broken references</li>\n<li>Validate that composition still functions correctly</li>\n<li>Update documentation of external dependencies</li>\n</ol>\n<h2 id=\"tbd-items\">TBD Items<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tbd-items\"></a></h2>\n<ul>\n<li><strong>Cross-mesh reference protocols</strong>: Standardized discovery and resolution mechanisms</li>\n<li><strong>Version compatibility</strong>: Handling version mismatches between composed meshes</li>\n<li><strong>Dependency management</strong>: Tools for tracking and updating external mesh dependencies</li>\n<li><strong>Conflict resolution</strong>: Handling namespace or identifier conflicts between composed meshes</li>\n<li><strong>Performance optimization</strong>: Efficient composition strategies for large meshes</li>\n</ul>\n<p>Composability enables Semantic Flow meshes to be combined and extracted flexibly while maintaining semantic integrity through intelligent tooling and clear design patterns.</p>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/s1yduc399adt3ihvnwievrd\">Reference Path Choices</a></li>\n<li><a href=\"/notes/fd1whkyvoagggk6ubysjl50\">djradon's sflo devlog</a></li>\n</ul>","noteIndex":{"id":"voy7zrf0f6bs86m02uadhaf","title":"Semantic Flow Documentation","desc":"","updated":1755716995138,"created":1755709990079,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"documentation","selfContained":false,"name":"sflo"},"contentHash":"33b763c521897064b83f4151cf73db5b","links":[{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"now","position":{"start":{"line":4,"column":1,"offset":107},"end":{"line":4,"column":8,"offset":114},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"now"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"todo","position":{"start":{"line":4,"column":11,"offset":117},"end":{"line":4,"column":19,"offset":125},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"todo"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"principle","position":{"start":{"line":4,"column":22,"offset":128},"end":{"line":4,"column":35,"offset":141},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"principle"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"dev.contributor.djradon.dev-log","position":{"start":{"line":4,"column":38,"offset":144},"end":{"line":4,"column":73,"offset":179},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"dev.contributor.djradon.dev-log"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"concept.mesh-repo","position":{"start":{"line":10,"column":1,"offset":497},"end":{"line":10,"column":22,"offset":518},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"concept.mesh-repo"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"concept.mesh","position":{"start":{"line":10,"column":40,"offset":536},"end":{"line":10,"column":56,"offset":552},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"concept.mesh"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"concept.semantic-site","position":{"start":{"line":10,"column":105,"offset":601},"end":{"line":10,"column":130,"offset":626},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"concept.semantic-site"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"feature","position":{"start":{"line":23,"column":7,"offset":1040},"end":{"line":23,"column":18,"offset":1051},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"feature"}}],"anchors":{"what-is-semantic-flow":{"type":"header","text":"What Is Semantic Flow?","value":"what-is-semantic-flow","line":12,"column":0,"depth":2},"benefits":{"type":"header","text":"Benefits","value":"benefits","line":18,"column":0,"depth":2},"features":{"type":"header","text":"Features","value":"features","line":25,"column":0,"depth":2}},"children":["p0vd6xnshcxw14ztkglxyxn","19a9e7c270ebne02zeg3fje","faq000","ggle3sz2jv3vf53t9qplrzo","yxn5rsqsv2gq4s6wbnxsjsj","l9g8eki3dtir51o4jagac5a","28q7fh05bs691llgv7htxnw","xqjr13fyons9goxv8rjrskj","wf2pmj0ewqu7lx0wyt55ga5"],"parent":null,"data":{},"body":"\n**Dereferenceable, versioned semantic meshes** will be the foundation for a new era of knowledge graphs.\n\n[[now]] | [[todo]] | [[principle]] | [[dev.contributor.djradon.dev-log]]\n\n## What Is Semantic Flow?\n\n**Semantic Flow** is a framework for managing and publishing resource indicators, knowledge graphs and other semantic data by leveraging GitHub, Gitlab, and other free static hosting services. It enables a **dereferenceable Semantic Web** where every HTTP IRI returns meaningful content.\n\n[[concept.mesh-repo]] provide storage, [[concept.mesh]] provide resource management and publishing, and [[concept.semantic-site]] support data discovery and explainability.\n\n## Benefits\n\n- own your own self-describing data and data schemas\n- complete version history when you want it\n- reliable persistence\n- truly FAIR (Findable, Accessible, Interoperable, and Reusable)\n\n## Features\n\n- seamlessly integrate other data sources anywhere in your mesh\n- generate and customize mini-sites or single-page applications for nodes in your mesh\n- see [[feature]] for a list of planned features\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"none","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"selection","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"documentation","selfContained":false,"name":"sflo"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Semantic Flow Docs","description":"A dendron-based wiki for sflo"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://semantic-flow.github.io/sflo","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}
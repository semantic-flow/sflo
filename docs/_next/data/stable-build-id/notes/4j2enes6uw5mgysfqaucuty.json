{"pageProps":{"note":{"id":"4j2enes6uw5mgysfqaucuty","title":"Hateoas Driven API Recipe","desc":"","updated":1753569859264,"created":1753569823797,"custom":{},"fname":"product-ideas.hateoas-driven-api-recipes","type":"note","vault":{"fsPath":"documentation","selfContained":false,"name":"sflo"},"contentHash":"b180458c4c2e0058e570073ed9494bdb","links":[],"anchors":{"your-use-case":{"type":"header","text":"Your Use Case","value":"your-use-case","line":8,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for","line":23,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows","line":36,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something","line":40,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner","line":46,"column":0,"depth":2},"your-use-case-1":{"type":"header","text":"Your Use Case","value":"your-use-case-1","line":60,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-1":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-1","line":75,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-1":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-1","line":88,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-1":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-1","line":92,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-1":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-1","line":98,"column":0,"depth":2},"your-use-case-2":{"type":"header","text":"Your Use Case","value":"your-use-case-2","line":112,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-2":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-2","line":127,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-2":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-2","line":140,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-2":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-2","line":144,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-2":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-2","line":150,"column":0,"depth":2},"your-use-case-3":{"type":"header","text":"Your Use Case","value":"your-use-case-3","line":164,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-3":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-3","line":179,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-3":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-3","line":192,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-3":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-3","line":196,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-3":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-3","line":202,"column":0,"depth":2},"your-use-case-4":{"type":"header","text":"Your Use Case","value":"your-use-case-4","line":216,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-4":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-4","line":231,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-4":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-4","line":244,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-4":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-4","line":248,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-4":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-4","line":254,"column":0,"depth":2},"your-use-case-5":{"type":"header","text":"Your Use Case","value":"your-use-case-5","line":268,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-5":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-5","line":283,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-5":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-5","line":296,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-5":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-5","line":300,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-5":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-5","line":306,"column":0,"depth":2},"your-use-case-6":{"type":"header","text":"Your Use Case","value":"your-use-case-6","line":320,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-6":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-6","line":335,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-6":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-6","line":348,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-6":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-6","line":352,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-6":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-6","line":358,"column":0,"depth":2},"your-use-case-7":{"type":"header","text":"Your Use Case","value":"your-use-case-7","line":372,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-7":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-7","line":387,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-7":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-7","line":400,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-7":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-7","line":404,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-7":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-7","line":410,"column":0,"depth":2},"your-use-case-8":{"type":"header","text":"Your Use Case","value":"your-use-case-8","line":424,"column":0,"depth":2},"-this-is-not-what-scalar-is-designed-for-8":{"type":"header","text":"🔥 This is not what Scalar is designed for","value":"-this-is-not-what-scalar-is-designed-for-8","line":439,"column":0,"depth":2},"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-8":{"type":"header","text":"> ✅ A human-usable API client with structured, composable, inspectable API macros or flows","value":"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-8","line":452,"column":0,"depth":3},"-so-yes-you-probably-need-to-build-something-8":{"type":"header","text":"🚨 So yes, you probably need to build something.","value":"-so-yes-you-probably-need-to-build-something-8","line":456,"column":0,"depth":2},"-what-you-actually-want-a-hateoas-recipe-runner-8":{"type":"header","text":"🧠 What You Actually Want: A “HATEOAS Recipe Runner”","value":"-what-you-actually-want-a-hateoas-recipe-runner-8","line":462,"column":0,"depth":2}},"children":[],"parent":"28q7fh05bs691llgv7htxnw","data":{}},"body":"<h1 id=\"hateoas-driven-api-recipe\">Hateoas Driven API Recipe<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hateoas-driven-api-recipe\"></a></h1>\n<h2 id=\"your-use-case\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-1\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-1\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-1\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-1\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-1\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-1\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-1\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-1\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-1\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-1\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-2\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-2\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-2\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-2\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-2\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-2\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-2\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-2\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-2\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-2\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-3\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-3\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-3\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-3\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-3\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-3\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-3\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-3\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-3\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-3\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-4\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-4\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-4\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-4\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-4\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-4\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-4\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-4\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-4\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-4\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-5\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-5\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-5\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-5\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-5\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-5\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-5\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-5\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-5\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-5\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-6\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-6\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-6\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-6\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-6\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-6\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-6\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-6\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-6\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-6\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-7\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-7\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-7\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-7\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-7\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-7\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-7\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-7\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-7\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-7\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>\n<h2 id=\"your-use-case-8\">Your Use Case<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#your-use-case-8\"></a></h2>\n<p>You're not just documenting the API — you're using it:</p>\n<ul>\n<li>To <strong>operate a mesh manually</strong>, before clients exist.</li>\n<li>You need an <strong>executable interface</strong>, not just static documentation.</li>\n<li>You want <strong>structured examples</strong> (i.e. <strong>recipes</strong>) that can act as proto-clients or decision-paths.</li>\n<li>You lean toward <strong>HATEOAS</strong> style: i.e., user follows links (or rels), maybe inputting small bits along the way.</li>\n</ul>\n<hr>\n<h2 id=\"-this-is-not-what-scalar-is-designed-for-8\">🔥 This is <em>not</em> what Scalar is designed for<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-this-is-not-what-scalar-is-designed-for-8\"></a></h2>\n<p>Scalar is a <strong>docs tool</strong>, great for:</p>\n<ul>\n<li>Rendering OpenAPI reference UIs.</li>\n<li>Hosting and styling spec-based endpoints.</li>\n<li><strong>Not</strong> for chaining calls, dynamic flows, or acting like a human-in-the-loop client.</li>\n</ul>\n<p>Even Stoplight or RapiDoc start to feel clunky in your context, because what you’re actually describing is closer to:</p>\n<h3 id=\"--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-8\">> ✅ A human-usable API client with structured, composable, inspectable <strong>API macros or flows</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#--a-human-usable-api-client-with-structured-composable-inspectable-api-macros-or-flows-8\"></a></h3>\n<hr>\n<h2 id=\"-so-yes-you-probably-need-to-build-something-8\">🚨 So yes, you probably need to build something.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-so-yes-you-probably-need-to-build-something-8\"></a></h2>\n<p>But here's how to think about it critically, so you <strong>don’t throw away everything</strong> or reinvent everything either.</p>\n<hr>\n<h2 id=\"-what-you-actually-want-a-hateoas-recipe-runner-8\">🧠 What You Actually Want: A “HATEOAS Recipe Runner”<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#-what-you-actually-want-a-hateoas-recipe-runner-8\"></a></h2>\n<p>You’re describing a system that does the following:</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>🔧 <strong>Embeds real OpenAPI</strong></td><td>So you get type safety, endpoint listings, schemas, validation</td></tr><tr><td>🧪 <strong>Can execute requests</strong></td><td>Full HTTP interaction, possibly with state/cookies/token</td></tr><tr><td>🪜 <strong>Supports recipes/flows</strong></td><td>Sequence of calls, possibly branching via hypermedia</td></tr><tr><td>🧵 <strong>Has local state/input</strong></td><td>To reuse values from previous steps</td></tr><tr><td>📎 <strong>HATEOAS link traversal</strong></td><td>e.g. follow <code>\"next\"</code> or <code>\"create\"</code> link relations dynamically</td></tr><tr><td>🧰 <strong>Deno/TS-native</strong></td><td>So it integrates with your mesh, Weave, etc.</td></tr><tr><td>🧭 <strong>Interactive + replayable</strong></td><td>You can try things, backtrack, debug</td></tr></tbody></table></div>","noteIndex":{"id":"voy7zrf0f6bs86m02uadhaf","title":"Semantic Flow Documentation","desc":"","updated":1755716995138,"created":1755709990079,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"documentation","selfContained":false,"name":"sflo"},"contentHash":"33b763c521897064b83f4151cf73db5b","links":[{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"now","position":{"start":{"line":4,"column":1,"offset":107},"end":{"line":4,"column":8,"offset":114},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"now"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"todo","position":{"start":{"line":4,"column":11,"offset":117},"end":{"line":4,"column":19,"offset":125},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"todo"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"principle","position":{"start":{"line":4,"column":22,"offset":128},"end":{"line":4,"column":35,"offset":141},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"principle"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"dev.contributor.djradon.dev-log","position":{"start":{"line":4,"column":38,"offset":144},"end":{"line":4,"column":73,"offset":179},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"dev.contributor.djradon.dev-log"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"concept.mesh-repo","position":{"start":{"line":10,"column":1,"offset":497},"end":{"line":10,"column":22,"offset":518},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"concept.mesh-repo"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"concept.mesh","position":{"start":{"line":10,"column":40,"offset":536},"end":{"line":10,"column":56,"offset":552},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"concept.mesh"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"concept.semantic-site","position":{"start":{"line":10,"column":105,"offset":601},"end":{"line":10,"column":130,"offset":626},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"concept.semantic-site"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"feature","position":{"start":{"line":23,"column":7,"offset":1040},"end":{"line":23,"column":18,"offset":1051},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"feature"}}],"anchors":{"what-is-semantic-flow":{"type":"header","text":"What Is Semantic Flow?","value":"what-is-semantic-flow","line":12,"column":0,"depth":2},"benefits":{"type":"header","text":"Benefits","value":"benefits","line":18,"column":0,"depth":2},"features":{"type":"header","text":"Features","value":"features","line":25,"column":0,"depth":2}},"children":["p0vd6xnshcxw14ztkglxyxn","19a9e7c270ebne02zeg3fje","faq000","ggle3sz2jv3vf53t9qplrzo","yxn5rsqsv2gq4s6wbnxsjsj","l9g8eki3dtir51o4jagac5a","28q7fh05bs691llgv7htxnw","xqjr13fyons9goxv8rjrskj","njzmjcg1z4xriclsgfi4pvo"],"parent":null,"data":{},"body":"\n**Dereferenceable, versioned semantic meshes** will be the foundation for a new era of knowledge graphs.\n\n[[now]] | [[todo]] | [[principle]] | [[dev.contributor.djradon.dev-log]]\n\n## What Is Semantic Flow?\n\n**Semantic Flow** is a framework for managing and publishing resource indicators, knowledge graphs and other semantic data by leveraging GitHub, Gitlab, and other free static hosting services. It enables a **dereferenceable Semantic Web** where every HTTP IRI returns meaningful content.\n\n[[concept.mesh-repo]] provide storage, [[concept.mesh]] provide resource management and publishing, and [[concept.semantic-site]] support data discovery and explainability.\n\n## Benefits\n\n- own your own self-describing data and data schemas\n- complete version history when you want it\n- reliable persistence\n- truly FAIR (Findable, Accessible, Interoperable, and Reusable)\n\n## Features\n\n- seamlessly integrate other data sources anywhere in your mesh\n- generate and customize mini-sites or single-page applications for nodes in your mesh\n- see [[feature]] for a list of planned features\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"none","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"selection","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"documentation","selfContained":false,"name":"sflo"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Semantic Flow Docs","description":"A dendron-based wiki for sflo"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://semantic-flow.github.io/sflo","assetsPrefix":"/sflo","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}
{"pageProps":{"note":{"id":"xebek3dtv2zgs9ah0vbv57g","title":"Semantic Flow General Guidance","desc":"","updated":1754524436757,"created":1751259888479,"custom":{},"fname":"contributor.general-guidance","type":"note","vault":{"fsPath":"documentation","selfContained":false,"name":"sflo"},"contentHash":"ae59f1727b568618296ee3097d187467","links":[{"type":"wiki","from":{"fname":"contributor.general-guidance","id":"xebek3dtv2zgs9ah0vbv57g","vaultName":"sflo"},"value":"concept.mesh","alias":"semantic meshes","position":{"start":{"line":2,"column":114,"offset":114},"end":{"line":2,"column":146,"offset":146},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"concept.mesh"}},{"type":"wiki","from":{"fname":"contributor.general-guidance","id":"xebek3dtv2zgs9ah0vbv57g","vaultName":"sflo"},"value":"sflo.tech-stack.quadstore.readme","position":{"start":{"line":69,"column":35,"offset":3653},"end":{"line":69,"column":71,"offset":3689},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"sflo.tech-stack.quadstore.readme"}},{"type":"wiki","from":{"fname":"contributor.general-guidance","id":"xebek3dtv2zgs9ah0vbv57g","vaultName":"sflo"},"value":"user./ontology/alpha/_node-data/_next/flow-ontology-alpha.trig","alias":"@/ontology/alpha/_node-data/_next/flow-ontology-alpha.trig","position":{"start":{"line":191,"column":68,"offset":10467},"end":{"line":191,"column":126,"offset":10525},"indent":[]},"xvault":false,"to":{"fname":"user./ontology/alpha/_node-data/_next/flow-ontology-alpha.trig"}}],"anchors":{"workspace-components":{"type":"header","text":"Workspace Components","value":"workspace-components","line":10,"column":0,"depth":2},"key-concepts":{"type":"header","text":"Key Concepts","value":"key-concepts","line":27,"column":0,"depth":2},"semantic-mesh":{"type":"header","text":"Semantic Mesh","value":"semantic-mesh","line":29,"column":0,"depth":3},"core-components":{"type":"header","text":"Core Components","value":"core-components","line":33,"column":0,"depth":4},"semantic-flow-workflow":{"type":"header","text":"Semantic Flow Workflow:","value":"semantic-flow-workflow","line":46,"column":0,"depth":3},"semantic-site":{"type":"header","text":"Semantic Site","value":"semantic-site","line":51,"column":0,"depth":3},"rdf-and-semantic-web":{"type":"header","text":"RDF and Semantic Web","value":"rdf-and-semantic-web","line":59,"column":0,"depth":2},"quadstore":{"type":"header","text":"Quadstore","value":"quadstore","line":73,"column":0,"depth":3},"documentation":{"type":"header","text":"Documentation","value":"documentation","line":79,"column":0,"depth":2},"documentation-first":{"type":"header","text":"Documentation First","value":"documentation-first","line":85,"column":0,"depth":3},"documentation-architecture":{"type":"header","text":"Documentation Architecture","value":"documentation-architecture","line":93,"column":0,"depth":3},"project-notes":{"type":"header","text":"Project notes","value":"project-notes","line":99,"column":0,"depth":3},"component-development-with-docs":{"type":"header","text":"Component Development with Docs","value":"component-development-with-docs","line":109,"column":0,"depth":3},"project-architecture":{"type":"header","text":"Project Architecture","value":"project-architecture","line":114,"column":0,"depth":2},"configuration-architecture":{"type":"header","text":"Configuration Architecture","value":"configuration-architecture","line":116,"column":0,"depth":3},"logging-system-architecture":{"type":"header","text":"Logging System Architecture","value":"logging-system-architecture","line":122,"column":0,"depth":3},"logging-system-patterns":{"type":"header","text":"Logging System Patterns","value":"logging-system-patterns","line":131,"column":0,"depth":3},"error-handling-patterns":{"type":"header","text":"Error Handling Patterns","value":"error-handling-patterns","line":135,"column":0,"depth":3},"file-organization":{"type":"header","text":"File Organization","value":"file-organization","line":141,"column":0,"depth":3},"implementation-patterns":{"type":"header","text":"Implementation Patterns","value":"implementation-patterns","line":145,"column":0,"depth":3},"coding-standards":{"type":"header","text":"Coding Standards","value":"coding-standards","line":151,"column":0,"depth":2},"language--runtime":{"type":"header","text":"Language & Runtime","value":"language--runtime","line":153,"column":0,"depth":3},"rdf-data-handling":{"type":"header","text":"RDF Data Handling","value":"rdf-data-handling","line":159,"column":0,"depth":3},"semantic-mesh-architecture":{"type":"header","text":"Semantic Mesh Architecture","value":"semantic-mesh-architecture","line":168,"column":0,"depth":3},"documentation-driven-development":{"type":"header","text":"Documentation-Driven Development","value":"documentation-driven-development","line":175,"column":0,"depth":3},"component-architecture":{"type":"header","text":"Component Architecture","value":"component-architecture","line":183,"column":0,"depth":3},"file-organization--naming":{"type":"header","text":"File Organization & Naming","value":"file-organization--naming","line":191,"column":0,"depth":3},"code-style":{"type":"header","text":"Code Style","value":"code-style","line":202,"column":0,"depth":3},"error-handling":{"type":"header","text":"Error Handling","value":"error-handling","line":210,"column":0,"depth":3},"enhanced-error-handling-with-logcontext":{"type":"header","text":"Enhanced Error Handling with LogContext","value":"enhanced-error-handling-with-logcontext","line":217,"column":0,"depth":4},"logcontext-structure":{"type":"header","text":"LogContext Structure","value":"logcontext-structure","line":225,"column":0,"depth":4},"handlecaughterror-examples":{"type":"header","text":"handleCaughtError Examples","value":"handlecaughterror-examples","line":241,"column":0,"depth":4},"handleerror-examples":{"type":"header","text":"handleError Examples","value":"handleerror-examples","line":291,"column":0,"depth":4},"import-patterns":{"type":"header","text":"Import Patterns","value":"import-patterns","line":351,"column":0,"depth":4},"testing":{"type":"header","text":"Testing","value":"testing","line":367,"column":0,"depth":3},"performance":{"type":"header","text":"Performance","value":"performance","line":375,"column":0,"depth":3}},"children":[],"parent":"sg6tqgoz8cwwmpt0a0r8783","data":{}},"body":"<h1 id=\"semantic-flow-general-guidance\">Semantic Flow General Guidance<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#semantic-flow-general-guidance\"></a></h1>\n<p><strong>Semantic Flow</strong> is a framework for managing knowledge graphs and other Semantic Web resources in publish-ready <a href=\"/sflo/notes/h6ssv16gdyf56gg235dxv85\">semantic meshes</a></p>\n<h2 id=\"workspace-components\">Workspace Components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#workspace-components\"></a></h2>\n<ul>\n<li>The sflow-platform repo/folder is organized as a monorepo, divided into a few different modules:\n<ul>\n<li><strong>flow-service/</strong>: Service component</li>\n<li><strong>flow-cli/</strong>: Command-line application that consumes the flow-service</li>\n<li><strong>flow-web/</strong>: Web frontend for the flow-service</li>\n<li><strong>flow-core/</strong>: cross-cutting code like type schemas, logging, and config</li>\n</ul>\n</li>\n<li>the <strong>sflo-dendron-notes/</strong> repo: wiki-based notes about mesh structure, specifications, and concepts; in Dendron format</li>\n<li>the <strong>test-ns/</strong> repo: Test mesh repo</li>\n<li><strong>ontology/</strong>: modular architecture for the Semantic Flow platform\n<ul>\n<li><code>mesh</code> - Core mesh architecture with base classes (Resource, Node, Element) and fundamental types</li>\n<li><code>node</code> - Node operations including Handle, Flow types, and operational relationships</li>\n<li><code>flow</code> - Temporal concepts including Snapshot types and versioning relationships</li>\n<li><code>config-flow</code> - Configuration properties that apply directly to mesh entities (nodes, flows, snapshots, etc.)</li>\n<li><code>meta-flow</code> - provenance and licensing vocabulary</li>\n<li><code>flow-service</code> - Service layer configuration vocabulary for the flow-service application</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"key-concepts\">Key Concepts<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-concepts\"></a></h2>\n<h3 id=\"semantic-mesh\">Semantic Mesh<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#semantic-mesh\"></a></h3>\n<p>A dereferenceable, versioned collection of semantic data and supporting resources, where every HTTP URI returns meaningful content.</p>\n<h4 id=\"core-components\">Core Components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#core-components\"></a></h4>\n<ul>\n<li><strong>Mesh Resources</strong>:\n<ul>\n<li><strong>Nodes</strong>: Semantic Atoms\n<ul>\n<li><strong>Dataset Nodes</strong>: Bundles of data with optional quasi-immutable, versioned history</li>\n<li><strong>Namespace Nodes</strong>: basically empty folders for URL-based hierarchical organization</li>\n<li><strong>Reference Nodes</strong>: Refer to \"things that exist\" like people, or songs, or ideas</li>\n</ul>\n</li>\n<li><strong>Elements</strong>: things that help define and systematize the nodes\n<ul>\n<li><strong>Flows</strong>: datasets for node metadata, reference data, and payload data\n<ul>\n<li><strong>Snapshots</strong>: temporal slices of a flow, containing RDF dataset distributions</li>\n</ul>\n</li>\n<li><strong>Handles</strong>: things that let you refer to a node as a node instead of as its referent</li>\n<li><strong>Asset Trees</strong>: elements that allow you to attach arbitrary collections of files and folders to a mesh; in a sense, these things are \"outside\" the mesh, and other than the top-level \"_meta\" folder, they don't contain any other mesh resources</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"semantic-flow-workflow\">Semantic Flow Workflow:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#semantic-flow-workflow\"></a></h3>\n<ul>\n<li>In General: Mesh resource addition &#x26; editing → Weaving</li>\n<li>a mesh is servable \"as-is\", so if the git provider is configure to serve it as a website, no additional publishing step is required (beyond commit)</li>\n</ul>\n<h3 id=\"semantic-site\">Semantic Site<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#semantic-site\"></a></h3>\n<ul>\n<li>The repo IS the site:\n<ul>\n<li>can be served locally</li>\n<li>SSG (Static Site Generator) not required\n<ul>\n<li>but static resource page generation should happen on every weave as necessary</li>\n</ul>\n</li>\n<li>after push, you should be able to see the changed mesh at the corresponding github pages URL</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"rdf-and-semantic-web\">RDF and Semantic Web<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rdf-and-semantic-web\"></a></h2>\n<ul>\n<li>avoid use of blank nodes</li>\n<li>prefer relative/local URIs for transposability/composability</li>\n<li>meshes support multiple RDF formats (.trig, .jsonld, etc.)\n<ul>\n<li>.trig might be better for user-facing content</li>\n<li>.jsonld might be better for system content</li>\n</ul>\n</li>\n<li>be mindful of RDF terminology and concepts\n<ul>\n<li>extends DCAT for dataset catalogs</li>\n<li>extends PROV for provenance, with relator-based contexts</li>\n</ul>\n</li>\n<li>When referring to IRIs or URIs that are part of a semantic mesh, prefer the term URLs instead of IRI or URI\n<ul>\n<li>if you see a reference to IRI or URI, it might need updating, or it might mean a distinction should be drawn</li>\n</ul>\n</li>\n<li>RDF comments should be extremely concise and clear.</li>\n</ul>\n<h3 id=\"quadstore\">Quadstore<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#quadstore\"></a></h3>\n<ul>\n<li>make sure you are familiar with <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">sflo.tech-stack.quadstore.readme (Private)</a>, which documents the API</li>\n<li>For testability and in case we ever want to use multiple stores simultaneously, store-accessing functions take a QuadstoreBundle</li>\n<li>quadstore API calls use \"undefined\" instead of \"null\" to represent the wildcard for subjects, predicates, objects, and graphs</li>\n</ul>\n<h2 id=\"documentation\">Documentation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#documentation\"></a></h2>\n<ul>\n<li>Avoid numbering of code comments, headings and list items, as it makes re-ordering a pain</li>\n<li>All specifications and design docs are in <code>sflo-dendron-notes/</code></li>\n<li>Check conversation logs in <code>sflo.conv.*</code> for context on design decisions if necessary, but beware of superceded and dangerously-outdated info</li>\n</ul>\n<h3 id=\"documentation-first\">Documentation First<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#documentation-first\"></a></h3>\n<ul>\n<li>unclear or anemic documentation should be called out</li>\n<li>documentation should be wiki-style: focused on the topic at hand, don't repeat yourself, keep things simple and clear</li>\n<li>when assisting with writing documentation, it should be kept concise and specific to the topic at hand</li>\n<li>whenever documentation is updated, any corresponding LLM conversation context should be updated too</li>\n<li>to encourage documentation-driven software engineering, code comments should refer to corresponding documentation by filename, and the documentation and code should be cross-checked for consistency whenever possible</li>\n</ul>\n<h3 id=\"documentation-architecture\">Documentation Architecture<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#documentation-architecture\"></a></h3>\n<ul>\n<li><code>sflo-dendron-notes</code> repo has wiki-style notes about the mesh architecture\n<ul>\n<li>Dendron handles the frontmatter... don't rewrite IDs or anything else in the frontmatter</li>\n</ul>\n</li>\n<li>official project documentation should be generated in <code>documentation</code> directory in markdown</li>\n</ul>\n<h3 id=\"project-notes\">Project notes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#project-notes\"></a></h3>\n<p>Project documentation, specifications, journaling, and design choices are stored in <code>sflo-dendron-notes/</code> using Dendron's hierarchical note system. Key documentation hierarchies include:</p>\n<ul>\n<li><strong>Concepts</strong>: <code>sflo.concept.*</code> files talk about general Semantic Flow concepts</li>\n<li><strong>Mesh docs</strong>: <code>sflo.concept.mesh.*</code> files define the semantic mesh architecture</li>\n<li><strong>Product specifications</strong>: <code>sflo.product.*</code> files detail each component</li>\n<li><strong>Use cases</strong>: <code>sflo.use-cases.*</code> files</li>\n<li><strong>Conversation logs</strong>: <code>sflo.conv.*</code> files track design decisions and development history; BEWARE! These conversations contain information and decisions that have been superceded. Only reference conversations when necessary for historical context. Newer conversations are usually less misleading.</li>\n</ul>\n<h3 id=\"component-development-with-docs\">Component Development with Docs<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#component-development-with-docs\"></a></h3>\n<ul>\n<li>Each module (flow-cli, flow-service, flow-web) should follow the architecture defined in the documentation</li>\n<li>Refer to <code>sflo.product.*</code> files for component-specifc descriptions, requirements, etc</li>\n</ul>\n<h2 id=\"project-architecture\">Project Architecture<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#project-architecture\"></a></h2>\n<h3 id=\"configuration-architecture\">Configuration Architecture<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#configuration-architecture\"></a></h3>\n<ul>\n<li>The project uses a sophisticated JSON-LD based configuration system with multiple layers</li>\n<li><strong>Service Configuration resolution order</strong>: CLI arguments → Environment variables → Config file → Defaults</li>\n<li>The <a href=\"/sflo/semantic-flow/flow-service/src/config/defaults.ts\"><code>defaults.ts</code></a> file is the source for \"platform default\" configuration</li>\n</ul>\n<h3 id=\"logging-system-architecture\">Logging System Architecture<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#logging-system-architecture\"></a></h3>\n<ul>\n<li><strong>Structured logging</strong> with rich <code>LogContext</code> interface is the preferred approach</li>\n<li><strong>Three-channel logging architecture</strong>:\n<ul>\n<li>Console logging (pretty format for development)</li>\n<li>File logging (pretty format for human readability)</li>\n<li>Sentry logging (structured JSON for error tracking)</li>\n</ul>\n</li>\n<li><strong>Graceful degradation principle</strong>: Logging failures should never crash the application</li>\n</ul>\n<h3 id=\"logging-system-patterns\">Logging System Patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#logging-system-patterns\"></a></h3>\n<ul>\n<li><code>let logger = getComponentLogger(import.meta);</code> at the start of every file</li>\n</ul>\n<h3 id=\"error-handling-patterns\">Error Handling Patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#error-handling-patterns\"></a></h3>\n<ul>\n<li>Use the <a href=\"/sflo/semantic-flow/flow-service/src/utils/logger.ts\"><code>handleCaughtError</code></a> utility for consistent error handling</li>\n<li><strong>Documentation</strong>: See <a href=\"/sflo/semantic-flow/flow-service/documentation/error-handling-usage.md\">error-handling-usage.md</a> for comprehensive usage examples</li>\n<li>The error handling system integrates with all logging tiers (console, file, Sentry)</li>\n</ul>\n<h3 id=\"file-organization\">File Organization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#file-organization\"></a></h3>\n<ul>\n<li><strong>Import paths</strong> require careful attention when reorganizing files to avoid breaking dependencies</li>\n</ul>\n<h3 id=\"implementation-patterns\">Implementation Patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#implementation-patterns\"></a></h3>\n<ul>\n<li><strong>Proper TypeScript interfaces</strong> for configuration validation and type safety</li>\n<li><strong>SHACL constraints</strong> for JSON-LD validation when working with semantic data</li>\n<li><strong>Modular design</strong>: Keep utilities focused and avoid circular dependencies between core modules</li>\n</ul>\n<h2 id=\"coding-standards\">Coding Standards<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#coding-standards\"></a></h2>\n<h3 id=\"language--runtime\">Language &#x26; Runtime<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#language--runtime\"></a></h3>\n<ul>\n<li><strong>TypeScript</strong>: Use strict TypeScript configuration with modern ES2022+ features</li>\n<li><strong>Deno</strong>: Prefer Deno over Node.js; avoid Node.js-specific dependencies</li>\n<li><strong>Imports</strong>: Use Deno-style imports with URLs (e.g., <code>import { assertEquals } from \"https://deno.land/std/assert/assert_equals.ts\"</code>)</li>\n</ul>\n<h3 id=\"rdf-data-handling\">RDF Data Handling<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rdf-data-handling\"></a></h3>\n<ul>\n<li><strong>Primary Format</strong>: .trig files for RDF data storage and processing</li>\n<li><strong>Secondary Format</strong>: Full JSON-LD support required</li>\n<li><strong>RDF Libraries</strong>: Use RDF.js ecosystem libraries consistently across components</li>\n<li><strong>Namespace Management</strong>: Follow URL-based identifier patterns as defined in <code>sflo.concept.identifier.md</code></li>\n<li><strong>Reserved Names</strong>: Validate against underscore-prefixed reserved identifiers per <code>sflo.concept.identifier.md</code></li>\n<li>The most effective validation strategy combines TypeScript structural validation with RDF semantic validation: DEV Community +2</li>\n</ul>\n<h3 id=\"semantic-mesh-architecture\">Semantic Mesh Architecture<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#semantic-mesh-architecture\"></a></h3>\n<ul>\n<li><strong>Resource Types</strong>: Nodes are the foundation, Elements support Nodes, Flows are \"abstract datasets\", and \"Snapshots\" are their temporal slices as defined in <code>sflo.concept.mesh.md</code></li>\n<li><strong>Folder Structure</strong>: Validate mesh folder structures (dataset nodes, namespace nodes, etc.)</li>\n<li><strong>System Elements</strong>: Distinguish between system-generated and user-modifiable elements</li>\n<li><strong>Weave Integration</strong>: Code must support weave operations as defined in <code>sflo.concept.weave.md</code></li>\n</ul>\n<h3 id=\"documentation-driven-development\">Documentation-Driven Development<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#documentation-driven-development\"></a></h3>\n<ul>\n<li><strong>Code Comments</strong>: reference corresponding documentation by filename (e.g., <code>// See sflo.concept.mesh.resource.node.md</code>)</li>\n<li><strong>Interface Definitions</strong>: Link to concept documentation in TSDoc comments</li>\n<li><strong>Cross-Reference Validation</strong>: Ensure consistency between code and documentation; if docs need updating, let me know</li>\n<li><strong>API Documentation</strong>: Generate from TSDoc comments</li>\n<li></li>\n</ul>\n<h3 id=\"component-architecture\">Component Architecture<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#component-architecture\"></a></h3>\n<ul>\n<li><strong>Shared code</strong>: should go in flow-core/</li>\n<li><strong>Separation</strong>: Maintain clear boundaries between flow-cli, flow-service, and flow-web</li>\n<li><strong>Error Handling</strong>: Use consistent error patterns across all components</li>\n<li><strong>Async Patterns</strong>: Use async/await for RDF operations and file I/O</li>\n<li><strong>Type Safety</strong>: Leverage TypeScript's type system for mesh resource validation</li>\n</ul>\n<h3 id=\"file-organization--naming\">File Organization &#x26; Naming<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#file-organization--naming\"></a></h3>\n<ul>\n<li><strong>TypeScript Modules</strong>: Use <code>.ts</code> extension, organize by feature/component</li>\n<li><strong>Test Files</strong>:\n<ul>\n<li>unit test files go in tests/unit/ using <code>.test.ts</code> suffix</li>\n<li>integration tests go in tests/integration</li>\n</ul>\n</li>\n<li><strong>Mesh Resources</strong>: Follow mesh resource naming conventions from <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">@/ontology/alpha/_node-data/_next/flow-ontology-alpha.trig (Private)</a></li>\n<li><strong>Constants</strong>: Use UPPER_SNAKE_CASE for constants, especially for reserved names; centralize constants, e.g. semantic-flow/flow-core/src/mesh-constants.ts</li>\n<li><strong>File size</strong>: For ease of AI-based editing, prefer lots of small files over one huge file</li>\n<li><strong>Quoting</strong>: For easier compatibility with JSON files, </li>\n</ul>\n<h3 id=\"code-style\">Code Style<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#code-style\"></a></h3>\n<ul>\n<li><strong>Linting</strong>: Use Deno's built-in linter (<code>deno lint</code>)\n<ul>\n<li>If using any is actually clearer than not using it, it's okay, just add the // deno-lint-ignore comment</li>\n</ul>\n</li>\n<li>use flow-core/src/deps.ts for centralizing imports</li>\n<li>import use single quotes</li>\n<li>Use <code>satisfies</code> whenever you're writing a literal config object that should be checked against a TypeScript shape, but you want to retain the full type of the literal for use in your program.</li>\n</ul>\n<h3 id=\"error-handling\">Error Handling<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#error-handling\"></a></h3>\n<ul>\n<li><strong>Custom Errors</strong>: Create semantic mesh-specific error types</li>\n<li><strong>Validation</strong>: Validate mesh resource structures before processing</li>\n<li><strong>Logging</strong>: Use structured logging for debugging weave operations</li>\n<li><strong>Async Error Propagation</strong>: Properly handle async/await error chains</li>\n</ul>\n<h4 id=\"enhanced-error-handling-with-logcontext\">Enhanced Error Handling with LogContext<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#enhanced-error-handling-with-logcontext\"></a></h4>\n<p>The platform uses <strong>LogContext-enhanced error handling</strong> from <code>flow-core/src/utils/logger/error-handlers.ts</code> for consistent error logging across all components. Both error handling functions now accept optional <code>LogContext</code> parameters for rich contextual information.</p>\n<p><strong>Core Functions:</strong></p>\n<ul>\n<li><code>handleCaughtError()</code> - For caught exceptions with comprehensive error type handling</li>\n<li><code>handleError()</code> - For controlled error scenarios with structured messaging</li>\n</ul>\n<h4 id=\"logcontext-structure\">LogContext Structure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#logcontext-structure\"></a></h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">LogContext</span></span> <span class=\"token punctuation\">{</span>\n  operation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 'startup', 'config-resolve', 'api-request', 'weave'</span>\n  component<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 'config-resolver', 'mesh-scanner', 'api-handler'</span>\n  operationId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Unique operation identifiers</span>\n  serviceContext<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Service name, version, environment</span>\n  configContext<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Configuration paths and types</span>\n  apiContext<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Request IDs and API details</span>\n  performanceMetrics<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Duration, memory usage, timing</span>\n  errorContext<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Error details and recovery info</span>\n  metadata<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Record</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Additional contextual data</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"handlecaughterror-examples\">handleCaughtError Examples<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#handlecaughterror-examples\"></a></h4>\n<p><strong>Basic Usage:</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> handleCaughtError <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../flow-core/src/utils/logger/error-handlers.ts'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">processConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// some async operation</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">handleCaughtError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> <span class=\"token string\">'Configuration processing failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Error</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Operation failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>With LogContext:</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> handleCaughtError <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../flow-core/src/utils/logger/error-handlers.ts'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">LogContext</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../flow-core/src/utils/logger/logger-types.ts'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loadConfigurationFile</span><span class=\"token punctuation\">(</span>configPath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> requestId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> logContext<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">LogContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'config-resolve'</span><span class=\"token punctuation\">,</span>\n    component<span class=\"token operator\">:</span> <span class=\"token string\">'config-loader'</span><span class=\"token punctuation\">,</span>\n    operationId<span class=\"token operator\">:</span> crypto<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    configContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      configPath<span class=\"token punctuation\">,</span>\n      configType<span class=\"token operator\">:</span> <span class=\"token string\">'file'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    apiContext<span class=\"token operator\">:</span> requestId <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> requestId <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">,</span>\n    performanceMetrics<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      startTime<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// load configuration file</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">handleCaughtError</span><span class=\"token punctuation\">(</span>\n      error<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Failed to load configuration file'</span><span class=\"token punctuation\">,</span>\n      logContext<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> attemptedPath<span class=\"token operator\">:</span> configPath <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">ConfigurationError</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Configuration loading failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"handleerror-examples\">handleError Examples<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#handleerror-examples\"></a></h4>\n<p><strong>API Error Handling:</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> handleError <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../flow-core/src/utils/logger/error-handlers.ts'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleApiRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> requestId <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">headers</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x-request-id'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> crypto<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'Invalid API request received'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Request validation failed'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        operation<span class=\"token operator\">:</span> <span class=\"token string\">'api-request'</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> <span class=\"token string\">'api-handler'</span><span class=\"token punctuation\">,</span>\n        apiContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          requestId<span class=\"token punctuation\">,</span>\n          method<span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">method</span><span class=\"token punctuation\">,</span>\n          url<span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        metadata<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          userAgent<span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">headers</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user-agent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          contentType<span class=\"token operator\">:</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">headers</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Response</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bad Request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">400</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Startup Error Handling:</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> handleError <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../flow-core/src/utils/logger/error-handlers.ts'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initializeService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">validateEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'Service initialization failed'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Environment validation failed'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        operation<span class=\"token operator\">:</span> <span class=\"token string\">'startup'</span><span class=\"token punctuation\">,</span>\n        component<span class=\"token operator\">:</span> <span class=\"token string\">'service-initializer'</span><span class=\"token punctuation\">,</span>\n        performanceMetrics<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          duration<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        errorContext<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          recoverable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          requiresRestart<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Error</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'Service initialization failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"import-patterns\">Import Patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#import-patterns\"></a></h4>\n<p><strong>Service-level imports:</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// For flow-service components</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> handleCaughtError<span class=\"token punctuation\">,</span> handleError <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../flow-core/src/utils/logger/error-handlers.ts'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">LogContext</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../flow-core/src/utils/logger/logger-types.ts'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>Component-specific imports:</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// For route handlers and utilities</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> handleCaughtError <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'../../../../flow-core/src/utils/logger/error-handlers.ts'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>This pattern ensures <strong>uniform error reporting</strong> with rich contextual information, <strong>easier debugging</strong> through structured logging, and <strong>consistent integration</strong> with console, file, and Sentry logging tiers.</p>\n<h3 id=\"testing\">Testing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#testing\"></a></h3>\n<ul>\n<li><strong>Unit Tests</strong>: Use Deno's built-in test runner; tests are located in test/unit/ dir</li>\n<li><strong>Integration Tests</strong>: Test mesh operations end-to-end; tests are located in test/integration/ dir</li>\n<li><strong>RDF Validation</strong>: Test both .trig and JSON-LD parsing/serialization</li>\n<li><strong>Mock Data</strong>: Create test mesh structures following documentation patterns</li>\n<li>after you think you've completed a task, check for any \"problems\", i.e., deno-lint</li>\n</ul>\n<h3 id=\"performance\">Performance<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#performance\"></a></h3>\n<ul>\n<li><strong>RDF Processing</strong>: Stream large RDF files where possible</li>\n<li><strong>File I/O</strong>: Use async file operations consistently</li>\n</ul>","noteIndex":{"id":"voy7zrf0f6bs86m02uadhaf","title":"Semantic Flow Documentation","desc":"","updated":1755716140409,"created":1755709990079,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"documentation","selfContained":false,"name":"sflo"},"contentHash":"a85a894fbaf533039f790504720f1a89","links":[{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"now","position":{"start":{"line":4,"column":1,"offset":107},"end":{"line":4,"column":8,"offset":114},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"now"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"todo","position":{"start":{"line":4,"column":11,"offset":117},"end":{"line":4,"column":19,"offset":125},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"todo"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"principle","position":{"start":{"line":4,"column":22,"offset":128},"end":{"line":4,"column":35,"offset":141},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"principle"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"contributor.djradon.dev-log","position":{"start":{"line":4,"column":38,"offset":144},"end":{"line":4,"column":69,"offset":175},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"contributor.djradon.dev-log"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"sflo.concept.mesh-repo","position":{"start":{"line":10,"column":1,"offset":493},"end":{"line":10,"column":27,"offset":519},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"sflo.concept.mesh-repo"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"sflo.concept.mesh","alias":"Semantic Meshes","position":{"start":{"line":10,"column":45,"offset":537},"end":{"line":10,"column":82,"offset":574},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"sflo.concept.mesh"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"sflo.concept.semantic-site","alias":"semantic sites","position":{"start":{"line":10,"column":131,"offset":623},"end":{"line":10,"column":176,"offset":668},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"sflo.concept.semantic-site"}},{"type":"wiki","from":{"fname":"root","id":"voy7zrf0f6bs86m02uadhaf","vaultName":"sflo"},"value":"feature","position":{"start":{"line":23,"column":7,"offset":1082},"end":{"line":23,"column":18,"offset":1093},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"feature"}}],"anchors":{"what-is-semantic-flow":{"type":"header","text":"What Is Semantic Flow?","value":"what-is-semantic-flow","line":12,"column":0,"depth":2},"benefits":{"type":"header","text":"Benefits","value":"benefits","line":18,"column":0,"depth":2},"features":{"type":"header","text":"Features","value":"features","line":25,"column":0,"depth":2}},"children":["p0vd6xnshcxw14ztkglxyxn","sg6tqgoz8cwwmpt0a0r8783","faq000","ggle3sz2jv3vf53t9qplrzo","yxn5rsqsv2gq4s6wbnxsjsj","l9g8eki3dtir51o4jagac5a","28q7fh05bs691llgv7htxnw","xqjr13fyons9goxv8rjrskj"],"parent":null,"data":{},"body":"\n**Dereferenceable, versioned semantic meshes** will be the foundation for a new era of knowledge graphs.\n\n[[now]] | [[todo]] | [[principle]] | [[contributor.djradon.dev-log]]\n\n## What Is Semantic Flow?\n\n**Semantic Flow** is a framework for managing and publishing resource indicators, knowledge graphs and other semantic data by leveraging GitHub, Gitlab, and other free static hosting services. It enables a **dereferenceable Semantic Web** where every HTTP IRI returns meaningful content.\n\n[[sflo.concept.mesh-repo]] provide storage, [[Semantic Meshes|sflo.concept.mesh]] provide resource management and publishing, and [[semantic sites|sflo.concept.semantic-site]] support data discovery and explainability.\n\n## Benefits\n\n- own your own self-describing data and data schemas\n- complete version history when you want it\n- reliable persistence\n- truly FAIR (Findable, Accessible, Interoperable, and Reusable)\n\n## Features\n\n- seamlessly integrate other data sources anywhere in your mesh\n- generate and customize mini-sites or single-page applications for nodes in your mesh\n- see [[feature]] for a list of planned features"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"none","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"selection","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"documentation","selfContained":false,"name":"sflo"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Semantic Flow Documentation","description":"A dendron-based wiki for sflo"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://semantic-flow.github.io/sflo","assetsPrefix":"/sflo","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}